(* program *)
	program = {var_def | var_declr | func_def }

(* basic definitions*)
	uppercase = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' 
			  | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' 
			  | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' 
			  | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' 
			  | 'Y' | 'Z' 

	lowercase = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' 
			  | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' 
			  | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' 
			  | 's' | 't' | 'u' | 'v' | 'w' | 'x' 
			  | 'y' | 'z' 

	num   = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' 
	float = num, {num}, '.', num, {number}

	number = num, {num} | float

	alpha = uppercase | lowercase
	alphanum = alpha | num

	identifier = alpha, {alphanum}

	(* expression *) 
(* operators *)
	opr 	   = '+' | '-' | '*' | '/'  | '%'
	bin_opr    = opr 
	assign_opr = opr, '='
	un_opr 	   = '-' | '*' 

	cmp_opr = '<' | '>' | '==' | '<=' | '>='

	bool_opr = '||' | '&&'

(* values *)
	string = '"', {alphanum | ' '}, '"'

	var_call = identifier
	func_call = identifier, '(', {identifier, [',']}, ')'

	value = var_call
		  | func_call
		  | number
		  | string 

	expression = value 
			   | un_opr, value
			   | expression, bin_opr, expression
			   | (expression)

	condition = expression
			  | expression, cmp_opr, expression 
			  | condition, bool_opr, condition
			  | '!', condition
			  | (condition)


(* variables *)
	type = 'i8' | 'i16' | 'i32' | 'i64'
		 | 'u8' | 'u16' | 'u32' | 'u64'
		 | 'f32' | 'f64' | 'str'

	value = number | string

	var_declr = 'let', identifier, ':', type

	var_def = 'let', identifier, ':', type, '=', expression
		    | 'let', identifier, '=', expression
			| identifier, ':=', expression

(* functions *)
	func_def = 'fn', identifier, '(', {identifier, type, [',']}, ')', [type], '{', {statement}, '}'

(* statements *)
	assigment = var_call, assign_opr, expression
			  | var_call, '=', '&', (var_call | func_call)

	statement = assigment
			  | if_stmnt 
			  | while_loop 
			  | return_stmnt
			  | var_declr 

	if_stmnt = 'if', expression, '{', {statement}, '}'

	while_loop = 'while', expression, '{', {statement}, '}'

	return_stmnt = 'return', expression, ';'

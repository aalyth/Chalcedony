//! The module responsible for compiling the `AST`, generated by the parser,
//! into the bytecode instructions, executed by the `CVM`.

pub mod class;
pub mod expr;
pub mod func;
pub mod stmnt;
pub mod var;

use crate::common::{Bytecode, Type};
use crate::error::{ChalError, CompileError, CompileErrorKind};
use crate::parser::ast::{NodeFuncCallStmnt, NodeImport, NodeProg};
use func::compile_func_call_inner;

use super::Chalcedony;

use std::path::Path;

pub trait ToBytecode {
    fn to_bytecode(self, interpreter: &mut Chalcedony) -> Result<Vec<Bytecode>, ChalError>;
}

impl ToBytecode for NodeProg {
    fn to_bytecode(self, interpreter: &mut Chalcedony) -> Result<Vec<Bytecode>, ChalError> {
        match self {
            NodeProg::VarDef(node) => node.to_bytecode(interpreter),
            NodeProg::FuncDef(node) => node.to_bytecode(interpreter),
            NodeProg::FuncCall(NodeFuncCallStmnt(node)) => node.to_bytecode(interpreter),
            NodeProg::Assign(node) => node.to_bytecode(interpreter),
            NodeProg::IfStmnt(node) => node.to_bytecode(interpreter),
            NodeProg::WhileLoop(node) => node.to_bytecode(interpreter),
            NodeProg::TryCatch(node) => node.to_bytecode(interpreter),
            NodeProg::Import(node) => node.to_bytecode(interpreter),
            NodeProg::Class(node) => node.to_bytecode(interpreter),
        }
    }
}

impl ToBytecode for NodeImport {
    fn to_bytecode(self, interpreter: &mut Chalcedony) -> Result<Vec<Bytecode>, ChalError> {
        if !Path::new(&self.path).exists() {
            return Err(
                CompileError::new(CompileErrorKind::ScriptNotFound(self.path), self.span).into(),
            );
        }
        let script_const_id = interpreter.get_global_id_internal("__name__", Type::Str, true);
        interpreter.vm.execute(vec![
            Bytecode::ConstS(self.path.clone().into()),
            Bytecode::SetGlobal(script_const_id),
        ]);

        interpreter.interpret_script(self.path);

        interpreter.vm.execute(vec![
            Bytecode::ConstS("__main__".to_string().into()),
            Bytecode::SetGlobal(script_const_id),
        ]);
        Ok(Vec::new())
    }
}
